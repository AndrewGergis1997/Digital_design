-- ----------------------------------------------------------------------
--    THIS IS AUTOMATICALLY GENERATED CODE
--   Generated by Mentor Graphics' Register Assistant V@PRODUCT_VERSION@
-- ----------------------------------------------------------------------
--  Created by       : @USER@
--  Creation Date    : @CREATION_DATE@
-- ----------------------------------------------------------------------
--  Project         : Bus Bridge
--  Bus Standard    : ARM(R)-AMBA(R)-APB
--   (ARM(R)   Advanced Microcontroller Bus Architecture(R)   APB)
--    All Rights Reserved Worldwide by their Respective Owners.
-- ----------------------------------------------------------------------
--  Title           : AMBA APB to RA Generic Bus Bridge
--
--  Description     : 
--      The Advanced Peripheral Bus (APB) is a low-cost interface
--      that is optimized for minimal power consumption and reduced
--      interface complexity. The APB protocol is useful for
--      connecting to low-bandwidth peripherals that do not require
--      the high performance of the AXI protocol.
--      Every transfer in APB takes at least two cycles.
--      The APB can interface with AHB and AXI Buses.
-- 
--      The RA Generic Bus is the generic bus used by all slaves generated
--      by Register-Assistant. It supports read/write operations
--      for registers configured inside blocks by Register-Assistant 
--
-- ----------------------------------------------------------------------


LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY apb_to_generic_bus_bridge IS
  generic (
    APB_ABUS_WIDTH : INTEGER := 32;   -- APB Address Bus Width
    APB_DBUS_WIDTH : INTEGER := 32;   -- APB Data Bus Width
    ABUS_WIDTH     : INTEGER := 32;   -- Address Bus Width
    DBUS_WIDTH     : INTEGER := 16    -- Data Bus Width
  );
  port (
    -- AMBA APB SIGNALS
    PRESETn   : in      std_logic;                                      -- AMBA APB Bus Reset. The APB reset signal is active LOW. This signal is normally connected directly to the system bus reset signal.
    PCLK      : in      std_logic;                                      -- AMBA APB Bus Clock. The rising edge of PCLK times all transfers on the APB.
    PADDR     : in      std_logic_vector(APB_ABUS_WIDTH - 1 downto 0);  -- AMBA APB Peripheral Address Bus. This is the APB address bus. It can be up to 32 bits wide and is driven by the peripheral bus bridge unit.
    PPROT     : in      std_logic_vector(2 downto 0);                   -- APBA APB Protection Type. This signal indicates the normal, privileged, or secure protection level of the transaction and whether the transaction is a data access or an instruction access.
    PSEL      : in      std_logic;                                      -- AMBA APB Peripheral Select. The APB bridge unit generates this signal to each peripheral bus slave. It indicates that the slave device is selected and that a data transfer is required. There is a PSELx signal for each slave.
    PENABLE   : in      std_logic;                                      -- AMBA APB Enable. Indicates 2nd and subsequent cycles of a transfer.
    PWRITE    : in      std_logic;                                      -- AMBA APB Transfer Direction. This signal indicates an APB write access when HIGH and an APB read access when LOW.
    PWDATA    : in      std_logic_vector(APB_DBUS_WIDTH - 1 downto 0);  -- AMBA APB Write Data. This bus is driven by the peripheral bus bridge unit during write cycles when PWRITE is HIGH. This bus can be up to 32 bits wide.
    PSTRB     : in      std_logic_vector(3 downto 0);                   -- [Not used] Write strobes. This signal indicates which byte lanes to update during a write transfer. There is one write strobe for each eight bits of the write data bus. Therefore, PSTRB[n] corresponds to PWDATA[(8n + 7):(8n)]. Write strobes must not be active during a read transfer.
    PREADY    : out     std_logic;                                      -- Ready. The slave uses this signal to extend an APB transfer.
    PRDATA    : out     std_logic_vector(APB_DBUS_WIDTH - 1 downto 0);  -- AMBA APB Read Data. The selected slave drives this bus during read cycles when PWRITE is LOW. This bus can be up to 32-bits wide.
    PSLVERR   : out     std_logic;                                      -- This signal indicates a transfer failure. APB peripherals are not required to support the PSLVERR pin. This is true for both existing and new APB peripheral designs. Where a peripheral does not include this pin then the appropriate input to the APB bridge is tied LOW.
    
    -- GENERIC BUS SIGNALS
    clock     : out   std_logic;                                        -- Register Bus Clock
    reset     : out   std_logic;                                        -- Register Bus Reset
    rstrobe   : out   std_logic;                                        -- Read Strobe. Activates a register read access when HIGH.
    raddr     : out   std_logic_vector (ABUS_WIDTH - 1 downto 0);       -- Read Address. Address of the register whose content is to be read.
    rdata     : in    std_logic_vector (DBUS_WIDTH - 1 downto 0);       -- Read Data. The content of the addressed register is placed on this bus when RSTROBE is HIGH.
    rack      : in    std_logic;                                        -- Read Acknowledge. Asserted HIGH when RDATA is valid. This can be on the current clock edge if "Read Data Mux Logic Type" is set to ASYNC or the next clock edge if set to SYNC.
    raddrerr  : in    std_logic;                                        -- Read Address Error. Indicates an attempt to access an unmapped register address for read.
    wstrobe   : out   std_logic;                                        -- Write Strobe. Activates a register write access when HIGH.
    waddr     : out   std_logic_vector (ABUS_WIDTH - 1 downto 0);       -- Write Address. Address of the register whose content is to be written.
    wdata     : out   std_logic_vector (DBUS_WIDTH - 1 downto 0);       -- Write Data. The content of the addressed register is placed on this bus and written to the register when WSTROBE is HIGH.
    wack      : in    std_logic;                                        -- Write Acknowledge. Asserted HIGH when WDATA has been assigned to the appropriate register. This can be on the current clock edge if "Address Decode Logic Type" is set to ASYNC or the next clock edge if set to SYNC.
    waddrerr  : in    std_logic                                         -- Write Address Error. Indicates an attempt to access an unmapped register address for write.
  );
END ENTITY apb_to_generic_bus_bridge;

ARCHITECTURE behaviour OF apb_to_generic_bus_bridge IS
BEGIN
  -- COMMON MAPPING
  reset                             <= PRESETn; -- RA Generic Bus reset must be configured to active low to work with APB
  clock                             <= PCLK;    -- RA Generic Bus clock must be configured to positive edge triggered to work with APB

  -- WRITING
  wdata                             <= PWDATA (DBUS_WIDTH - 1 downto 0);
  wstrobe                           <= PSEL AND (PWRITE AND PENABLE);
  waddr                             <= PADDR (ABUS_WIDTH - 1 downto 0);

  -- READING
  PRDATA (DBUS_WIDTH - 1 downto 0)  <= rdata(DBUS_WIDTH - 1 downto 0) when PSEL = '1' else (others  => 'Z');
  rstrobe                           <= PSEL AND ((NOT PWRITE) AND PENABLE);
  raddr                             <= PADDR(ABUS_WIDTH - 1 downto 0);

  -- SHARED SIGNALS
  PREADY                            <= ((PWRITE AND wack) OR ((NOT PWRITE) AND rack)) when PSEL = '1' else 'Z';
  PSLVERR                           <= ((PWRITE AND waddrerr) OR ((NOT PWRITE) AND raddrerr)) when PSEL = '1' else 'Z';
END ARCHITECTURE behaviour;