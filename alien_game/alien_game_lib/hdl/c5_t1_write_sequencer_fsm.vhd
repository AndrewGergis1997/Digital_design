-- VHDL Entity alien_game_lib.c5_t1_write_sequencer.symbol
--
-- Created:
--          by - mqange.UNKNOWN (HTC219-712-SPC)
--          at - 20:38:00 13.11.2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t1_write_sequencer IS
   PORT( 
      alien_defeated : IN     std_logic;
      clk            : IN     std_logic;
      rst            : IN     std_logic;
      write_ready    : IN     std_logic;
      enable         : OUT    std_logic;
      frame_done     : OUT    std_logic;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      write          : OUT    std_logic
   );

-- Declarations

END c5_t1_write_sequencer ;

--
-- VHDL Architecture alien_game_lib.c5_t1_write_sequencer.fsm
--
-- Created:
--          by - mqange.UNKNOWN (HTC219-712-SPC)
--          at - 21:30:29 17.11.2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c5_t1_write_sequencer IS

   TYPE STATE_TYPE IS (
      Start,
      wr,
      led_pos_1,
      s0,
      led_pos_2,
      led_pos_3,
      s2,
      s1,
      led_pos_4,
      s3
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s3 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= Start;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      csm_timeout,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s3 <= '0';
      CASE current_state IS
         WHEN Start => 
            IF (write_ready = '0') THEN 
               next_state <= Start;
            ELSIF (write_ready = '1') THEN 
               next_state <= wr;
            ELSE
               next_state <= Start;
            END IF;
         WHEN wr => 
            next_state <= s0;
         WHEN led_pos_1 => 
            next_state <= led_pos_2;
         WHEN s0 => 
            next_state <= led_pos_1;
         WHEN led_pos_2 => 
            next_state <= led_pos_3;
         WHEN led_pos_3 => 
            next_state <= led_pos_4;
         WHEN s2 => 
            next_state <= s3;
            csm_to_s3 <= '1';
         WHEN s1 => 
            next_state <= s2;
         WHEN led_pos_4 => 
            next_state <= s1;
         WHEN s3 => 
            IF (csm_timeout = '1') THEN 
               next_state <= Start;
            ELSE
               next_state <= s3;
            END IF;
         WHEN OTHERS =>
            next_state <= Start;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN Start => 
            module_select <= "00";
            gun_px_idx <= "00";
            frame_done <= '0';
            write <= '0';
            enable <= '0';
         WHEN wr => 
            module_select <= "00";
            gun_px_idx <= "00";
            frame_done <= '0';
            write <=  '1';
            enable <= '0';
         WHEN led_pos_1 => 
            write <= '1';
            module_select <= "01";
            gun_px_idx <= "00";
            frame_done <= '0';
            enable <= '0';
         WHEN s0 => 
            write <= '0';
            module_select <= "01";
            gun_px_idx <= "00";
            frame_done <= '0';
            enable <= '0';
         WHEN led_pos_2 => 
            write <= '1';
            module_select <= "01";
            gun_px_idx <= "01";
            frame_done <= '0';
            enable <= '0';
         WHEN led_pos_3 => 
            write <= '1';
            module_select <= "01";
            gun_px_idx <= "10";
            frame_done <= '0';
            enable <= '0';
         WHEN s2 => 
            write <= '0';
            module_select <= "00";
            gun_px_idx <= "00";
            frame_done <= '0';
            enable <= '1';
         WHEN s1 => 
            write <= '0' ;
            module_select <= "00";
            gun_px_idx <= "00";
            frame_done <= '1';
            enable <= '0';
         WHEN led_pos_4 => 
            write <= '1';
            module_select <= "01";
            gun_px_idx <= "11";
            frame_done <= '0';
            enable <= '0';
         WHEN s3 => 
            write <= '0';
            module_select <= "00";
            gun_px_idx <= "00";
            frame_done <= '0';
            enable <= '0';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s3
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s3 = '1') THEN
         csm_next_timer <= "101101110001101011111111"; -- no cycles(12000000)-1=11999999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
