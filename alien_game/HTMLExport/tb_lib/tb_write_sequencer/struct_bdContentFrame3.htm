<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:18:35 on 11/11/22 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity tb_lib.tb_write_sequencer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kayra.UNKNOWN (pikkuhaikara.lin.tuni.fi)</span>
<span class=C>--          at - 11:25:06 09&#47;18&#47;19</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> tb_write_sequencer <span class=K>IS</span>
<span class=C>-- Declarations</span>

<span class=K>END</span> tb_write_sequencer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture tb_lib.tb_write_sequencer.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mqange.mqange (pikkuhaikara.lin.tuni.fi)</span>
<span class=C>--          at - 15:18:05 11&#47;11&#47;22</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;
<span class=K>LIBRARY</span> tb_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> tb_write_sequencer <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> alien_coord_const : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> alien_def_const   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> clk               : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> enable            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> rst_n             : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> simulation_ends   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> wr_done           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> write             : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> write_ready       : <span class=T>std_logic</span>;


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c5_t1_write_sequencer
   <span class=K>PORT</span> (
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> wr_seq_tester
   <span class=K>PORT</span> (
      enable          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      simulation_ends : <span class=A>IN</span>     <span class=T>std_logic</span>;
      wr_done         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk             : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      rst_n           : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      write_ready     : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c5_t1_write_sequencer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c5_t1_write_sequencer;
   <span class=K>FOR</span> <span class=K>ALL</span> : wr_seq_tester <span class=K>USE</span> <span class=K>ENTITY</span> tb_lib.wr_seq_tester;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'alien_coord_const' of 'constval'</span>
   alien_coord_const <= <span class=S>"00000001"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'alien_defeated_const' of 'constval'</span>
   alien_def_const <= '0';

   <span class=C>-- ModuleWare code(v1.12) for instance 'simulation_ends' of 'constval'</span>
   simulation_ends <= '1';

   <span class=C>-- Instance port mappings.</span>
   U_0 : c5_t1_write_sequencer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_defeated => alien_def_const,
         clk            => clk,
         rst_n          => rst_n,
         write_ready    => write_ready,
         enable         => enable,
         frame_done     => wr_done,
         gun_px_idx     => <span class=K>OPEN</span>,
         module_select  => <span class=K>OPEN</span>,
         write          => write
      );
   U_1 : wr_seq_tester
      <span class=K>PORT</span> <span class=K>MAP</span> (
         enable          => enable,
         wr_done         => wr_done,
         write           => write,
         clk             => clk,
         rst_n           => rst_n,
         write_ready     => write_ready,
         simulation_ends => simulation_ends
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
