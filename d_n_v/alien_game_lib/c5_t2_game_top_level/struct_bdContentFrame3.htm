<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:54:54 on  1.12.2022 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t2_game_top_level.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mqange.UNKNOWN (HTC219-712-SPC)</span>
<span class=C>--          at - 22:50:05 13.11.2022</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t2_game_top_level <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn     : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      channel : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      lat     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_clk   : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_rst   : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_sda   : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      sb      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t2_game_top_level ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t2_game_top_level.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mqange.UNKNOWN (HTC219-710-SPC)</span>
<span class=C>--          at - 23:54:36  1.12.2022</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;
<span class=K>LIBRARY</span> pre_made;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c5_t2_game_top_level <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> Alien_Color   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> X_coordinate  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> Y_coordinate  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> color         : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> color_BGR     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> defeated      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din0          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din2          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din3          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din4          : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din5          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout2         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout3         : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4         : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout5         : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout6         : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> enable        : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> frame_done    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> gun_color     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> gun_px_idx    : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> module_select : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> w_rdy         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> write         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> x_coord       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord2      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c3_hit_defeated
   <span class=K>PORT</span> (
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      defeated : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t1_basic_alien
   <span class=K>PORT</span> (
      Enable             : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk                : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit                : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst                : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      alien_color        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      alien_x_coordinate : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_y_coordinate : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t1_gun_module
   <span class=K>PORT</span> (
      btn         : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_px_idx  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      gun_x_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      gun_y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c5_t1_write_sequencer
   <span class=K>PORT</span> (
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c6_t1_hit_detector
   <span class=K>PORT</span> (
      alien_x_coordinate : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      btn                : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk                : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_x_coordinate1  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      rst_n              : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit                : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c6_t2_victory_effect
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> display_controller
   <span class=K>PORT</span> (
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color_BGR  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      frame_done : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x_coord    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      channel    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      lat        : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      s_clk      : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      s_rst      : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      s_sda      : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      sb         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      w_rdy      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_hit_defeated <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_hit_defeated;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t1_basic_alien <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t1_basic_alien;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_gun_module <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_gun_module;
   <span class=K>FOR</span> <span class=K>ALL</span> : c5_t1_write_sequencer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c5_t1_write_sequencer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c6_t1_hit_detector <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c6_t1_hit_detector;
   <span class=K>FOR</span> <span class=K>ALL</span> : c6_t2_victory_effect <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c6_t2_victory_effect;
   <span class=K>FOR</span> <span class=K>ALL</span> : display_controller <span class=K>USE</span> <span class=K>ENTITY</span> pre_made.display_controller;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'constval'</span>
   din3 <= <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'constval'</span>
   din2 <= <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'constval'</span>
   din4 <= <span class=S>"000000000000000000000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_16' of 'constval'</span>
   din5 <= <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_17' of 'constval'</span>
   dout3 <= <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_18' of 'constval'</span>
   dout4 <= <span class=S>"000000000000000000000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(X_coordinate, x_coord, din3, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => din0 <= X_coordinate;
      <span class=K>WHEN</span> <span class=S>"01"</span> => din0 <= x_coord;
      <span class=K>WHEN</span> <span class=S>"10"</span> => din0 <= din3;
      <span class=K>WHEN</span> <span class=S>"11"</span> => din0 <= din3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => din0 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'mux'</span>
   u_5combo_proc: <span class=K>PROCESS</span>(Y_coordinate, y_coord, din2, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout6 <= Y_coordinate;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout6 <= y_coord;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout6 <= din2;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout6 <= din2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout6 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'mux'</span>
   u_6combo_proc: <span class=K>PROCESS</span>(Alien_Color, gun_color, din4, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout5 <= Alien_Color;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout5 <= gun_color;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout5 <= din4;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout5 <= din4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout5 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'mux'</span>
   u_8combo_proc: <span class=K>PROCESS</span>(din0, x_coord1, din5, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout <= din0;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout <= x_coord1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout <= din5;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout <= din5;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_8combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'mux'</span>
   u_9combo_proc: <span class=K>PROCESS</span>(dout6, y_coord2, dout3, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => y_coord1 <= dout6;
      <span class=K>WHEN</span> <span class=S>"01"</span> => y_coord1 <= y_coord2;
      <span class=K>WHEN</span> <span class=S>"10"</span> => y_coord1 <= dout3;
      <span class=K>WHEN</span> <span class=S>"11"</span> => y_coord1 <= dout3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_coord1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_9combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_15' of 'mux'</span>
   u_15combo_proc: <span class=K>PROCESS</span>(dout5, color, dout4, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => color_BGR <= dout5;
      <span class=K>WHEN</span> <span class=S>"01"</span> => color_BGR <= color;
      <span class=K>WHEN</span> <span class=S>"10"</span> => color_BGR <= dout4;
      <span class=K>WHEN</span> <span class=S>"11"</span> => color_BGR <= dout4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => color_BGR <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_15combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_7 : c3_hit_defeated
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         hit      => dout2,
         rst      => rst_n,
         defeated => defeated
      );
   U_1 : c3_t1_basic_alien
      <span class=K>PORT</span> <span class=K>MAP</span> (
         Enable             => enable,
         clk                => clk,
         hit                => dout2,
         rst                => rst_n,
         alien_color        => Alien_Color,
         alien_x_coordinate => X_coordinate,
         alien_y_coordinate => Y_coordinate
      );
   U_0 : c4_t1_gun_module
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn         => btn,
         clk         => clk,
         enable      => enable,
         gun_px_idx  => gun_px_idx,
         rst_n       => rst_n,
         gun_color   => gun_color,
         gun_x_coord => x_coord,
         gun_y_coord => y_coord
      );
   U_2 : c5_t1_write_sequencer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_defeated => defeated,
         clk            => clk,
         rst            => rst_n,
         write_ready    => w_rdy,
         enable         => enable,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         write          => write
      );
   U_13 : c6_t1_hit_detector
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x_coordinate => X_coordinate,
         btn                => btn(0),
         clk                => clk,
         gun_x_coordinate1  => x_coord,
         rst_n              => rst_n,
         hit                => dout2
      );
   U_14 : c6_t2_victory_effect
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         rst_n   => rst_n,
         color   => color,
         x_coord => x_coord1,
         y_coord => y_coord2
      );
   U_3 : display_controller
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk        => clk,
         color_BGR  => color_BGR,
         frame_done => frame_done,
         rst_n      => rst_n,
         write      => write,
         x_coord    => dout,
         y_coord    => y_coord1,
         channel    => channel,
         lat        => lat,
         s_clk      => s_clk,
         s_rst      => s_rst,
         s_sda      => s_sda,
         sb         => sb,
         w_rdy      => w_rdy
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
