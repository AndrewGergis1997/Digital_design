<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:39:52 on  1.12.2022 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c6_t2_y_coord_vic.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mqange.UNKNOWN (HTC219-722-SPC)</span>
<span class=C>--          at - 17:21:42 22.11.2022</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c6_t2_y_coord_vic <span class=K>IS</span>
   <span class=K>PORT</span>(
      mux_signal : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c6_t2_y_coord_vic ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c6_t2_y_coord_vic.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mqange.UNKNOWN (HTC219-722-SPC)</span>
<span class=C>--          at - 17:30:26 22.11.2022</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;


<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c6_t2_y_coord_vic <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> din0  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din10 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din15 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din4  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din8  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);



<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'constval'</span>
   din0 <= <span class=S>"00000010"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'constval'</span>
   din4 <= <span class=S>"00000100"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'constval'</span>
   din8 <= <span class=S>"00010000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'constval'</span>
   din10 <= <span class=S>"00100000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'constval'</span>
   din15 <= <span class=S>"01000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'mux'</span>
   u_0combo_proc: <span class=K>PROCESS</span>(din0, din4, din8, din10, din15, mux_signal)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> mux_signal <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"0000"</span> => y_coord <= din0;
      <span class=K>WHEN</span> <span class=S>"0100"</span> => y_coord <= din4;
      <span class=K>WHEN</span> <span class=S>"0101"</span> => y_coord <= din4;
      <span class=K>WHEN</span> <span class=S>"0111"</span> => y_coord <= din4;
      <span class=K>WHEN</span> <span class=S>"1000"</span> => y_coord <= din8;
      <span class=K>WHEN</span> <span class=S>"1010"</span> => y_coord <= din10;
      <span class=K>WHEN</span> <span class=S>"1100"</span> => y_coord <= din15;
      <span class=K>WHEN</span> <span class=S>"1101"</span> => y_coord <= din15;
      <span class=K>WHEN</span> <span class=S>"1111"</span> => y_coord <= din15;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_coord <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0combo_proc;

   <span class=C>-- Instance port mappings.</span>

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
