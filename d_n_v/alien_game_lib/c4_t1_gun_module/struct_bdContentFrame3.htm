<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:39:48 on  1.12.2022 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_t1_gun_module.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mqange.UNKNOWN (HTC219-722-SPC)</span>
<span class=C>--          at - 16:58:09 22.11.2022</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_t1_gun_module <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_color  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_t1_gun_module ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_t1_gun_module.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mqange.UNKNOWN (HTC219-722-SPC)</span>
<span class=C>--          at - 16:58:09 22.11.2022</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c4_t1_gun_module <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> din0  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din1  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din2  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din3  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout2 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c4_t1_m1
   <span class=K>PORT</span> (
      btn          : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x_coordinate : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t1_m2
   <span class=K>PORT</span> (
      btn          : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x_coordinate : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t1_m3
   <span class=K>PORT</span> (
      btn          : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x_coordinate : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_m1 <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_m1;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_m2 <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_m2;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_m3 <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_m3;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'and'</span>
   dout <= gun_px_idx(1) <span class=K>AND</span> gun_px_idx(0);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'constval'</span>
   gun_color <= x<span class=S>"FFFF00"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'constval'</span>
   dout1 <= <span class=S>"10000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'constval'</span>
   dout2 <= <span class=S>"01000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(din0, din1, din2, din3, gun_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> gun_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => x_coord <= din0;
      <span class=K>WHEN</span> <span class=S>"01"</span> => x_coord <= din1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => x_coord <= din2;
      <span class=K>WHEN</span> <span class=S>"11"</span> => x_coord <= din3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => x_coord <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'mux'</span>
   u_5combo_proc: <span class=K>PROCESS</span>(dout1, dout2, dout)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => y_coord <= dout1;
      <span class=K>WHEN</span> '1' => y_coord <= dout2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_coord <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_1 : c4_t1_m1
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn          => btn,
         clk          => clk,
         enable       => enable,
         rst_n        => rst_n,
         x_coordinate => din0
      );
   U_0 : c4_t1_m2
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn          => btn,
         clk          => clk,
         enable       => enable,
         rst_n        => rst_n,
         x_coordinate => din1
      );
   U_7 : c4_t1_m2
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn          => btn,
         clk          => clk,
         enable       => enable,
         rst_n        => rst_n,
         x_coordinate => din3
      );
   U_2 : c4_t1_m3
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn          => btn,
         clk          => clk,
         enable       => enable,
         rst_n        => rst_n,
         x_coordinate => din2
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
