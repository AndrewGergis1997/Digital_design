<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:43:38 on 26.09.2022 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c1_t4_decrementer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - bbhiwa.UNKNOWN (HTC219-720-SPC)</span>
<span class=C>--          at - 12:40:16 26.09.2022</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c1_t4_decrementer <span class=K>IS</span>
   <span class=K>PORT</span>(
      x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      y : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c1_t4_decrementer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c1_t4_decrementer.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - bbhiwa.UNKNOWN (HTC219-720-SPC)</span>
<span class=C>--          at - 12:40:16 26.09.2022</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c1_t4_decrementer <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> carry : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> cout  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2 : <span class=T>std_logic</span>;


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c1_t1_half_adder
   <span class=K>PORT</span> (
      sw0   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      sw1   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      carry : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      sum   : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> full_adder
   <span class=K>PORT</span> (
      x0   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x1   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x2   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      cout : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      sum  : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_t1_half_adder <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_t1_half_adder;
   <span class=K>FOR</span> <span class=K>ALL</span> : full_adder <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.full_adder;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'constval'</span>
   dout <= '1';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'constval'</span>
   dout1 <= '1';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'constval'</span>
   dout2 <= '1';

   <span class=C>-- Instance port mappings.</span>
   U_8 : c1_t1_half_adder
      <span class=K>PORT</span> <span class=K>MAP</span> (
         sw0   => x(0),
         sw1   => dout,
         carry => carry,
         sum   => y(0)
      );
   U_0 : full_adder
      <span class=K>PORT</span> <span class=K>MAP</span> (
         x0   => x(1),
         x1   => dout1,
         x2   => carry,
         cout => cout,
         sum  => y(1)
      );
   U_1 : full_adder
      <span class=K>PORT</span> <span class=K>MAP</span> (
         x0   => x(2),
         x1   => dout2,
         x2   => cout,
         cout => <span class=K>OPEN</span>,
         sum  => y(2)
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
